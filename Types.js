// number = +3 + 3
// number = +3 + 3; // Значенню number присвоюємо два числа 3 і 3 за допомогою операторів Плюс (+)
// console.log(number); // Вивід, який ми отримуємо це 6 (тип даних Number) оператор Плюс (+) діятиме як арифметичний оператор, оскільки операція виконується над числовими значеннями.

// null + 3
// let a = null; // Задаємо змінну для null
// let b = 3; // Задаємо змінну для числа яке додаватимо до null
// let c = null + 3; // Задаємо змінну для поріняння з null
// console.log(c); // Вивід, який ми отримуємо це 3 (тип даних null). "null" використовується для явного позначення відсутності значення, тобто так як значення у null відсутнє,то в нас залишається тільки 3

// 5 && "qwerty";
// let a = 5; // Задаємо змінну для числа 5
// let b = "qwerty"; // Задаємо змінну для рядка "qwerty"
// console.log(5 && "qwerty"); // Вивід, який ми отримуємо це "qwerty", логічний оператор І(&&) повертає небулеві значення як є, наприклад останнє надане

// +"40" + +"2" + "hillel";
// console.log(+"40" + +"2" + "hillel"); // Вивід, який ми отримуємо це 42hillel; тому що +"40" перетворює рядок "40" на число, в результаті чого виходить 40.
// +"2" перетворює рядок "2" на число, в результаті чого виходить 2.
// 40 + 2 буде 42. А "hillel" - це рядок. Тому ми склеюємо операнди.

// "10" - 5 === 6;
// let a = 10;
// let b = 5;
// let c = 6;
// let d = "10" - 5 === 6;
// console.log(d); // Вивід, який ми отримуємо в консолі - false; тому що два об'єкти вважаються рівними, тільки якщо вони є одним і тим самим об'єктом, а не тільки якщо вони мають однакові властивості та значення.

// true + false
// let a = true; // Задаємо змінну для логічного значення true
// let b = false; //  Задаємо змінну для логічного значення false
// let c = true + false; // Задаємо змінну для склеювання двох логічних значень true та false
// console.log(c); // Вивід, який ми отримуємо в консолі це 1, що рівно true (тип даних Boolean)

// "4px" - 3;
// typeof "4px" - 3;
// console.log(typeof "4px" - 3); // Вивід, який ми отримуємо - NaN; тому що "4px" це string, а 3 це число, мі не можемо проводити арифметичні вичислення, якщо обидва значення не є числами, тому результат NaN

// "4" - 3;
// console.log("4" - 3); // Вивід, який ми отримуємо це 1; обидва значення є числами, тому проводимо арифметичні вичислення.

// "6" + 3 ** 0;
// console.log("6" + 3 ** 0); // Вивід, який ми отримуємо це 61; ** повертає результат зведення першого операнда у ступінь другого операнда

// 12 / "6";
// console.log(12 / "6"); // Вивід, який ми отримуємо це 2; обидва значення є числами, тому проводимо арифметичні вичислення.

// "10" + (5 === 6);
// console.log("10" + (5 === 6)); // Вивід, який ми отримуємо це fasle; тому що два об'єкти вважаються рівними, тільки якщо вони є одним і тим самим об'єктом, а не тільки якщо вони мають однакові властивості та значення.

// null == "";
// console.log(null == ""); // Вивід, який ми отримуємо - false, тому що обидва значення і нулл і ""(undefined) Ці значення різні, оскільки різні їх типи, тому ми не можемо їх зрівнювати і тому результат будет false

// 3 ** (9 / 3);
// let a = 3;
// let b = 9;
// let c = 3 ** (9 / 3);
// console.log(c); // Вивід, який ми отримуємо це 27 (тип даних BigInt); була виконана арифметична операція, возведена у ступінь

// !!"false" == !!"true";
// let a = !!"false" == !!"true";
// console.log(a); // Вивід, який ми отримуємо це true, вони рівні бо є рядками

// 0 || ("0" && 1(+null == false) < 1);
// console.log(0 || ("0" && (1 + null == false) < 1));
// Вивід, який ми отримуємо це true; тому що:
// 1 + null оцінюється як 1, оскільки null розглядається як 0 в арифметичних операціях.
// 1 == false обчислюється як false, оскільки оператор рівності (==) перевіряє рівність значень, а 1 не дорівнює false.
// Вираз стає ("0" && false) < 1. Тут "0" є правдивим, а false - неправдивим. Оператор && повертає останній обчислений операнд, тому вираз стає false < 1.
// Нарешті, false < 1 обчислюється як true.

// (false && true) || true;
// console.log((false && true) || true); // Вивід, який ми отримуємо true (Boolean); (false && true) -> отримали фолс, потім false || true у кінці дає нам тру, бо при оретаорі || якщо при наймі одна операнда тру, в інших випадках буде фолс

// false && (false || true);
// console.log(false && (false || true)); // Вивід, який ми отримуємо false (Boolean);
// якщоб ми перевіряли суто false || true(логічний оператор 'або') нам би повернуло тру; && (і) - повертає true , коли обидва операнда true , інакше false ; || (або) - повертає false , якщо два операнди false , у всіх інших випадках true ; !

// (+null == false) < 1 ** 5;
// console.log((+null == false) < 1 ** 5); // Вивід, який ми отримуємо false, тому що +null оцінюється як 0; 0 == false має значення true.
// Тепер ми маємо true < 1 ** 5. Порівняння рівності (==) має вищий пріоритет, ніж порівняння менше ніж (<), тому вираз фактично обчислюється як (істина) < (1 ** 5).
// Отже, вираз стає 1 < 1 ** 5, тобто 1 < 1 або фолс.
